group_by(camera) %>%
class_metrics(., truth = dr, estimate = dr_final)) %>%
bind_rows(.id = 'boots') %>%
select(-.estimator) %>%
spread(.metric, .estimate, convert=TRUE) %>%
group_by(camera) %>%
summarize_at(vars(sens, spec, ppv, npv), lst(!!!p_funs))
# Now merge together the estimates and CIs and reshape into more useful format
sensspectable_nonprolif_dr_subset <- full_join(sensspec_estimates_nonprolif_dr_subset, bs_sensspec_nonprolif_dr_subset, by="camera")
sensspectablelong_nonprolif_dr_subset <- sensspectable_nonprolif_dr_subset %>%
gather(field, value, npv_est:npv_upper95) %>%
separate(field, into=c("metric", "stat"), sep="_") %>%
spread(stat, value, convert=TRUE) %>%
write.csv("senspectablelong_nonprolif_dr_subset.csv")
# SN for screening for early/intermed AMD
earlyint_amd_subset <- alldata_final %>%
filter(diagnosis_amd == 1 | diagnosis_amd == 2)
addmargins(xtabs(data=earlyint_amd_subset, ~amd+amd_final))
earlyint_amd_subset %>% filter(!is.na(camera)) %>% group_by(camera) %>% sens(., truth = as.factor(amd), estimate = as.factor(amd_final))
earlyint_amd_subset %>% filter(!is.na(camera)) %>% group_by(camera) %>% spec(., truth = as.factor(amd), estimate = as.factor(amd_final))
earlyint_amd_subset$amd <- as.factor(earlyint_amd_subset$amd)
earlyint_amd_subset$amd_final <- as.factor(earlyint_amd_subset$amd_final)
class(earlyint_amd_subset$amd)
class(earlyint_amd_subset$amd_final)
confmatrixtable_earlyint_amd_subset <- earlyint_amd_subset %>%
filter(!is.na(camera)) %>%
group_by(camera) %>%
conf_mat(amd, amd_final) %>%
mutate(tidied = map(conf_mat, tidy)) %>%
unnest(tidied) %>%
spread(name, value) %>%
rename(bothpos=cell_1_1,
bothneg=cell_2_2,
testpos_gsneg=cell_1_2,
testneg_gspos=cell_2_1)
confmat_peek_earlyint_amd_subset <- earlyint_amd_subset %>%
filter(camera=="peek") %>%
conf_mat(amd, amd_final)
summary(confmat_peek_amd)
confmat_inview_earlyint_amd_subset <- earlyint_amd_subset %>%
filter(camera=="inview") %>%
conf_mat(amd, amd_final)
summary(confmat_inview_amd)
confmat_pictor_earlyint_amd_subset <- earlyint_amd_subset %>%
filter(camera=="pictor") %>%
conf_mat(amd, amd_final)
summary(confmat_pictor_amd)
sensspec_estimates_earlyint_amd_subset <- earlyint_amd_subset %>%
filter(!is.na(camera)) %>%
group_by(camera) %>%
class_metrics(., truth = amd, estimate = amd_final) %>%
select(-.estimator) %>%
spread(.metric, .estimate, convert=TRUE) %>%
rename(sens_est=sens,
spec_est=spec,
npv_est=npv,
ppv_est=ppv)
# Check
xtabs(data=filter(earlyint_amd_subset, camera=="peek"), ~amd+amd_final)
## bootstrapped 95% CI accounting for clustering of eyes
bs_sensspec_earlyint_amd_subset <- map(bs$splits, ~as_tibble(.) %>% unnest %>%
filter(!is.na(camera)) %>%
group_by(camera) %>%
class_metrics(., truth = as.factor(amd), estimate = as.factor(amd_final))) %>%
bind_rows(.id = 'boots') %>%
select(-.estimator) %>%
spread(.metric, .estimate, convert=TRUE) %>%
group_by(camera) %>%
summarize_at(vars(sens, spec, ppv, npv), lst(!!!p_funs))
# Now merge together the estimates and CIs and reshape into more useful format
sensspectable_earlyint_amd_subset <- full_join(sensspec_estimates_earlyint_amd_subset, bs_sensspec_earlyint_amd_subset, by="camera")
sensspectablelong_earlyint_amd_subset <- sensspectable_earlyint_amd_subset %>%
gather(field, value, npv_est:npv_upper95) %>%
separate(field, into=c("metric", "stat"), sep="_") %>%
spread(stat, value, convert=TRUE) %>%
write.csv("senspectablelong_earlyint_amd_subset.csv")
# no use calculating SN screening for mild/moderate glaucoma bc only 3 cases of moderate and 0 cases of mild
####### Table 1 #####
# filter data → one eye per line
eyes_data <- alldata_final %>%
filter(camera == "pictor")
#filter data → one patient per line
pt_data <- alldata_final %>%
group_by(study_id) %>%
mutate(max_photoid = max(photoid, na.rm = TRUE)) %>%
filter(max_photoid == photoid)
# number of unique EYES
summary(unique(eyes_data$studyid_eye))
# number of unique PATIENTS
summary(unique(pt_data$study_id))
# age: median
summary(pt_data$age)
# gender (1 = female; 0 = male)
sum(pt_data$gender, na.rm = TRUE)
# number of pts with cataracts
sum(pt_data$cataract == 1 | pt_data$cataract == 2 | pt_data$cataract == 3 | pt_data$cataract == 4, na.rm = TRUE)
#NS cataract
sum(pt_data$cataract == 1, na.rm = TRUE)
#cortical cataract
sum(pt_data$cataract == 2, na.rm = TRUE)
#PSC cataract
sum(pt_data$cataract == 3, na.rm = TRUE)
#unspec cataract
sum(pt_data$cataract == 4 | pt_data$cataract == 5, na.rm = TRUE)
#degree of cataract
sum(pt_data$cataract_deg == 1, na.rm = TRUE)
sum(pt_data$cataract_deg == 2, na.rm = TRUE)
sum(pt_data$cataract_deg == 3, na.rm = TRUE)
sum(pt_data$cataract_deg == 4, na.rm = TRUE)
sum(pt_data$cataract_deg == 5, na.rm = TRUE)
#camera-specific info
#peek time & discomfort
peek_only <- alldata_final %>%
filter(camera == "peek")
summary(peek_only$seconds)
summary(peek_only$discomfort)
#inview time & discomfort
inview_only <- alldata_final %>%
filter(camera == "inview")
summary(inview_only$seconds)
summary(inview_only$discomfort)
#pictor time & discomfort
pictor_only <- alldata_final %>%
filter(camera == "pictor")
summary(pictor_only$seconds)
summary(pictor_only$discomfort)
#image_clarity...number of eyes with:
#...excellent clarity
sum(peek_only$image_clarity_final == 4, na.rm = TRUE)
sum(inview_only$image_clarity_final == 4, na.rm = TRUE)
sum(pictor_only$image_clarity_final == 4, na.rm = TRUE)
#...good clarity
sum(peek_only$image_clarity_final == 3, na.rm = TRUE)
sum(inview_only$image_clarity_final == 3, na.rm = TRUE)
sum(pictor_only$image_clarity_final == 3, na.rm = TRUE)
#...fair clarity
sum(peek_only$image_clarity_final == 2, na.rm = TRUE)
sum(inview_only$image_clarity_final == 2, na.rm = TRUE)
sum(pictor_only$image_clarity_final == 2, na.rm = TRUE)
#...poor clarity
sum(peek_only$image_clarity_final == 1, na.rm = TRUE)
sum(inview_only$image_clarity_final == 1, na.rm = TRUE)
sum(pictor_only$image_clarity_final == 1, na.rm = TRUE)
#photo quality...coverage of the optic nerve
#fully vis
sum(peek_only$nerve_final == 2, na.rm = TRUE)
sum(inview_only$nerve_final == 2, na.rm = TRUE)
sum(pictor_only$nerve_final == 2, na.rm = TRUE)
#partly vis
sum(peek_only$nerve_final == 1, na.rm = TRUE)
sum(inview_only$nerve_final == 1, na.rm = TRUE)
sum(pictor_only$nerve_final == 1, na.rm = TRUE)
#absent
sum(peek_only$nerve_final == 0, na.rm = TRUE)
sum(inview_only$nerve_final == 0, na.rm = TRUE)
sum(pictor_only$nerve_final == 0, na.rm = TRUE)
#photo quality...coverage of the macula
#fully vis
sum(peek_only$macula_final == 2, na.rm = TRUE)
sum(inview_only$macula_final == 2, na.rm = TRUE)
sum(pictor_only$macula_final == 2, na.rm = TRUE)
#partly vis
sum(peek_only$macula_final == 1, na.rm = TRUE)
sum(inview_only$macula_final == 1, na.rm = TRUE)
sum(pictor_only$macula_final == 1, na.rm = TRUE)
#absent
sum(peek_only$macula_final == 0, na.rm = TRUE)
sum(inview_only$macula_final == 0, na.rm = TRUE)
sum(pictor_only$macula_final == 0, na.rm = TRUE)
#photo quality...coverage of zone 2
#fully vis
sum(peek_only$zone2_final == 2, na.rm = TRUE)
sum(inview_only$zone2_final == 2, na.rm = TRUE)
sum(pictor_only$zone2_final == 2, na.rm = TRUE)
#partly vis
sum(peek_only$zone2_final == 1, na.rm = TRUE)
sum(inview_only$zone2_final == 1, na.rm = TRUE)
sum(pictor_only$zone2_final == 1, na.rm = TRUE)
#absent
sum(peek_only$zone2_final == 0, na.rm = TRUE)
sum(inview_only$zone2_final == 0, na.rm = TRUE)
sum(pictor_only$zone2_final == 0, na.rm = TRUE)
#confidence in grading vcdr
#able, confident
sum(peek_only$vcdr_confidence_final == 1, na.rm = TRUE)
sum(inview_only$vcdr_confidence_final == 1, na.rm = TRUE)
sum(pictor_only$vcdr_confidence_final == 1, na.rm = TRUE)
#able, NOT confident
sum(peek_only$vcdr_confidence_final == 2, na.rm = TRUE)
sum(inview_only$vcdr_confidence_final == 2, na.rm = TRUE)
sum(pictor_only$vcdr_confidence_final == 2, na.rm = TRUE)
#unable to grade
sum(peek_only$vcdr_confidence_final == 3, na.rm = TRUE)
sum(inview_only$vcdr_confidence_final == 3, na.rm = TRUE)
sum(pictor_only$vcdr_confidence_final == 3, na.rm = TRUE)
#total eyes with DR
eyes_data <- eyes_data %>%
mutate(dr=as.numeric(dr))
eyes_data$dr[eyes_data$dr == 1] <- 0
eyes_data$dr[eyes_data$dr == 2] <- 1
sum(eyes_data$dr, na.rm = TRUE)
#eyes with mild or moderate NPDR
sum(eyes_data$diagnosis_dr == 1, na.rm = TRUE)
#eyes with severe NPDR
sum(eyes_data$diagnosis_dr == 2, na.rm = TRUE)
#eyes with PDR
sum(eyes_data$diagnosis_dr == 3, na.rm = TRUE)
#eyes with unspecified DR
sum(eyes_data$diagnosis_dr == 4, na.rm = TRUE)
#eyes with DME
sum(eyes_data$dme, na.rm = TRUE)
#total eyes with AMD
eyes_data <- eyes_data %>%
mutate(amd=as.numeric(amd))
eyes_data$amd[eyes_data$amd == 1] <- 0
eyes_data$amd[eyes_data$amd == 2] <- 1
sum(eyes_data$amd, na.rm = TRUE)
#eyes with early amd
sum(eyes_data$diagnosis_amd == 1, na.rm = TRUE)
#eyes with intermed amd
sum(eyes_data$diagnosis_amd == 2, na.rm = TRUE)
#eyes with advanced amd
sum(eyes_data$diagnosis_amd == 3, na.rm = TRUE)
#eyes with unspec amd
sum(eyes_data$diagnosis_amd == 4, na.rm = TRUE)
#total eyes with glaucoma
eyes_data <- eyes_data %>%
mutate(glaucoma=as.numeric(glaucoma))
eyes_data$glaucoma[eyes_data$glaucoma == 1] <- 0
eyes_data$glaucoma[eyes_data$glaucoma == 2] <- 1
sum(eyes_data$glaucoma, na.rm = TRUE)
#eyes with mild/early glauc
sum(eyes_data$diagnosis_glaucoma == 1, na.rm = TRUE)
#eyes with mod glauc
sum(eyes_data$diagnosis_glaucoma == 2, na.rm = TRUE)
#eyes with severe glauc
sum(eyes_data$diagnosis_glaucoma == 3, na.rm = TRUE)
#eyes with unspec glauc
sum(eyes_data$diagnosis_glaucoma == 4, na.rm = TRUE)
#eyes with NA info on glauc
sum(eyes_data$diagnosis_glaucoma == 5, na.rm = TRUE)
#total eyes with other dx
eyes_data <- eyes_data %>%
mutate(otherdx=as.numeric(otherdx))
eyes_data$otherdx[eyes_data$otherdx == 1] <- 0
eyes_data$otherdx[eyes_data$otherdx == 2] <- 1
sum(eyes_data$otherdx, na.rm = TRUE)
list_otherdx <- eyes_data %>%
select(other_retinal_path) %>%
filter(!(is.na(other_retinal_path))) %>%
write.csv("list_otherdx.csv")
#Clear existing redcapexport and graphics
rm(list=ls())
graphics.off()
library(readr)
#Load exploratory redcapexport analysis packages
library(tidyverse)
library(scales)   # date/time scales for plots
library(lubridate)
library(epiR)
library(dplyr)
##Read Digicards Data
# JK: looks like cataract not recorded separately for each eye so not really sure how this will be useful
#LL: Digicards didn't distinguish btwn OD/OS cataracts if I remember correctly (or else I assume I
#     would have separated them). I guess the data can be included in summary characteristics of eyes in
#     Table 1.
# JK: missing data for 2 of them, I am filtering them out // LL: OK (complete set of photos not taken for these patients)
redcapexport <- read_csv("SmartphoneRetinalScr_DATA_2019-09-10_0855.csv") %>%
filter(study_id!=3807366 & study_id!=3746321) %>%
rename(otherretinalpath_right=other_retinal_path,
otherretinalpath_left=other_retinal_path_left,
dxdr_right=diagnosis_dr,
dxdr_left=diagnosis_dr_left,
dxamd_right=diagnosis_amd,
dxamd_left=diagnosis_amd_left,
dxglaucoma_right=diagnosis_glaucoma,
dxglaucoma_left=diagnosis_glaucoma_left) %>%
mutate(cam_a=recode_factor(cam_a, `1`="peek", `2`="inview", `3`="pictor"),
cam_b=recode_factor(cam_b, `1`="peek", `2`="inview", `3`="pictor"),
cam_c=recode_factor(cam_c, `1`="peek", `2`="inview", `3`="pictor")) %>%
gather(field, value, cam_a:cam_c) %>%
mutate(valueorder=paste(value, "order", sep="_"),
field=case_when(field=="cam_a" ~ 1,
field=="cam_b" ~ 2,
field=="cam_c" ~ 3,
TRUE ~ NA_real_)) %>%
select(-value) %>%
spread(valueorder, field, convert=TRUE)
hospitalandphotoid <- read_csv("Hospital ID - Photo ID.csv")
#re-add leading 0's to studyid's
#wide -> long data; each photoid in separate row
hospitalandphotoid_long <- hospitalandphotoid %>%
filter(study_id!=3807366 & study_id!=3746321) %>%
mutate(study_id=formatC(as.integer(study_id), width = 7, format = "d", flag = "0")) %>%
gather(key = camera, value = photoid, peek:pictor) %>%
group_by(study_id, eye, camera) %>%
mutate(duph=n())
hdups <-   hospitalandphotoid_long %>%
filter(duph>1)
# JK: note changes; when you reshape you should do all the variables that have a right and left eye. Not just a single variable.
#long data for RE/LE diagnoses
redcapexport_long <- redcapexport %>%
gather(key = field, value = value, dr_right:dxglaucoma_left) %>%
separate(field, into=c("disease", "eye"), sep="_") %>%
mutate(eye=case_when(eye=="right" ~ "RE",
eye=="left" ~ "LE",
TRUE ~ NA_character_)) %>%
spread(disease, value, convert=TRUE) %>%
select(peek_time:pictor_discomfort, inview_order:pictor_order, everything()) %>%
gather(field, value, peek_time:pictor_order) %>%
separate(field, into=c("camera", "var"), sep="_") %>%
spread(var, value, convert=TRUE) %>%
select(study_id, eye, camera, everything()) %>%
group_by(study_id, eye, camera)
digicards_data <- full_join(redcapexport_long, hospitalandphotoid_long, by=c("study_id", "eye", "camera")) %>%
mutate(photoid=as.character(photoid)) %>%
filter(!is.na(photoid))
# *** filtered out duplicate photos (keeping only photos taken on the last clinic visit; unfortunately I kept only the last clinic date
#       in Digicards, so couldn't automate this with code and had to do this manually via photoid's from my patient log spreadsheet)
digicards_data <- digicards_data %>%
filter(!(photoid == "1943" | photoid == "1118" | photoid == "3240" | photoid == "2079" | photoid == "1229" | photoid == "1034")) %>%
filter(!(photoid == "3103" | photoid == "1308" | photoid == "3108" | photoid == "3624" | photoid == "1784" | photoid == "1493")) %>%
filter(!(photoid == "3439" | photoid == "1174" | photoid == "2368" | photoid == "1947" | photoid == "3218" | photoid == "1215")) %>%
filter(!(photoid == "3903" | photoid == "2229" | photoid == "3130" | photoid == "1287" | photoid == "1506" | photoid == "3686")) %>%
filter(!(photoid == "2895" | photoid == "2920" | photoid == "1966" | photoid == "1804" | photoid == "3115" | photoid == "1149")) %>%
filter(!(photoid == "1008" | photoid == "1586" | photoid == "3505" | photoid == "2884" | photoid == "1455" | photoid == "3443")) %>%
filter(!(photoid == "1943" | photoid == "1118" | photoid == "3240" | photoid == "2079" | photoid == "1229" | photoid == "1034")) %>%
filter(!(photoid == "2858" | photoid == "3808" | photoid == "2297" | photoid == "1078" | photoid == "3274" | photoid == "2896")) %>%
filter(!(photoid == "3763" | photoid == "3201" | photoid == "3970" | photoid == "3668" | photoid == "2429" | photoid == "2588")) %>%
filter(!(photoid == "1582" | photoid == "2806" | photoid == "2616" | photoid == "2056" | photoid == "2631" | photoid == "2590")) %>%
filter(!(photoid == "2058" | photoid == "2419" | photoid == "1988" | photoid == "2992" | photoid == "2213" | photoid == "3135")) %>%
filter(!(photoid == "2556" | photoid == "3577" | photoid == "1870" | photoid == "2583" | photoid == "3395" | photoid == "2527")) %>%
filter(!(photoid == "1713" | photoid == "1967" | photoid == "3587" | photoid == "3347" | photoid == "3464" | photoid == "3422")) %>%
filter(!(photoid == "3383" | photoid == "2469" | photoid == "1672" | photoid == "1684" | photoid == "1237" | photoid == "1540")) %>%
filter(!(photoid == "1810" | photoid == "1680" | photoid == "2488" | photoid == "1635" | photoid == "3194" | photoid == "2796")) %>%
filter(!(photoid == "3266" | photoid == "2909" | photoid == "1838" | photoid == "1616" | photoid == "1222" | photoid == "2242")) %>%
filter(!(photoid == "3364" | photoid == "3681" | photoid == "1550" | photoid == "3716" | photoid == "3898" | photoid == "3811")) %>%
filter(!(photoid == "1946" | photoid == "3015" | photoid == "2517" | photoid == "2809" | photoid == "1969" | photoid == "3528")) %>%
filter(!(photoid == "2547" | photoid == "2679" | photoid == "2550" | photoid == "1245" | photoid == "3209" | photoid == "3592")) %>%
filter(!(photoid == "3442" | photoid == "1138" | photoid == "1407" | photoid == "2833" | photoid == "1249" | photoid == "3434")) %>%
filter(!(photoid == "2050" | photoid == "2510" | photoid == "2413" | photoid == "2205" | photoid == "2246" | photoid == "2981")) %>%
filter(!(photoid == "2363" | photoid == "2496" | photoid == "3913" | photoid == "2255" | photoid == "1218" | photoid == "3032")) %>%
filter(!(photoid == "1809" | photoid == "1137" | photoid == "2198" | photoid == "2296" | photoid == "3562" | photoid == "2761")) %>%
select(-duph)
# JK: Note, export the Redcap project "Smartphone Retinal Screening-Team 1"
# JK: It seems like it would be way more efficient to first combine all the data and then perform the manipulations
team1_import <- read_csv("SmartphoneRetinalScr_DATA_2019-09-10_0846_T1.csv") %>%  mutate(team=1)
team2_import <- read_csv("SmartphoneRetinalScr_DATA_2019-09-10_0851_T2.csv") %>%  mutate(team=2)
team3_import <- read_csv("SmartphoneRetinalScr_DATA_2019-09-10_0852_T3.csv") %>%  mutate(team=3)
team4_import <- read_csv("SmartphoneRetinalScr_DATA_2019-09-10_0852_T4.csv") %>%  mutate(team=4)
teams_import <- bind_rows(team1_import, team2_import, team3_import, team4_import)
# JK: Now repeat append process for the adjudicated grades
# JK: I ADDED THE MUTATE TEAM HERE TO PREVENT AN ERROR IN YOUR GRADING_DATA OBJECT BELOW
adj_team1 <- read_csv("SmartphoneAdjudicati_DATA_2019-09-10_0852_T1.csv") %>%  mutate(team=1)
adj_team2 <- read_csv("SmartphoneAdjudicati_DATA_2019-09-10_0853_T2.csv") %>%  mutate(team=2)
adj_team3 <- read_csv("SmartphoneAdjudicati_DATA_2019-09-10_0853_T3.csv") %>%  mutate(team=3)
adj_team4 <- read_csv("SmartphoneAdjudicati_DATA_2019-09-10_0853_T4.csv") %>%  mutate(team=4)
adj_teams <- bind_rows(adj_team1, adj_team2, adj_team3, adj_team4) %>%
mutate(study_id=paste0(record_id, "--3")) %>%
select(-record_id)
grading_data_allgrades <- bind_rows(teams_import, adj_teams) %>%
select(-new_photo_grading_form_complete) %>%
# JK: PREFERRED TO USE IF_ELSE NOT IFELSE
mutate(dr_yesno = if_else((dr == 0 | dr == 1), 0,
if_else((dr == 2 | dr == 3), 1, NA_real_)),
dme_yesno = if_else((dme == 0 | dme == 1), 0,
if_else((dme == 2 | dme == 3), 1, NA_real_)),
amd_yesno = if_else((amd == 0 | amd == 1), 0,
# JK: THE XTABS NEEDS TO USE THE CORRECT DATA...
if_else((amd == 2 | amd == 3), 1, NA_real_))) %>% # xtabs(data=grading_data, ~dr + dr_yesno, addNA=TRUE)
# xtabs(data=grading_data, ~amd + amd_yesno, addNA=TRUE)
separate(study_id, c("photoid", "grader"), sep = "--", remove = TRUE, convert = FALSE)
grading_data_allgrades <- bind_rows(teams_import, adj_teams) %>%
select(-new_photo_grading_form_complete) %>%
# JK: PREFERRED TO USE IF_ELSE NOT IFELSE
mutate(dr_yesno = if_else((dr == 0 | dr == 1), 0,
if_else((dr == 2 | dr == 3), 1, NA_real_)),
dme_yesno = if_else((dme == 0 | dme == 1), 0,
if_else((dme == 2 | dme == 3), 1, NA_real_)),
amd_yesno = if_else((amd == 0 | amd == 1), 0,
# JK: THE XTABS NEEDS TO USE THE CORRECT DATA...
if_else((amd == 2 | amd == 3), 1, NA_real_))) %>% # xtabs(data=grading_data, ~dr + dr_yesno, addNA=TRUE)
# xtabs(data=grading_data, ~amd + amd_yesno, addNA=TRUE)
separate(study_id, c("photoid", "grader"), sep = "--", remove = TRUE, convert = FALSE)
grading_data_consensus <- grading_data_allgrades %>%
group_by(photoid) %>%
# JK: CHANGE THIS BACK to mutate to PROBLEMSOLVE
summarize(numgraders=n(),
dr_final=median(dr_yesno),
numdrgrades=sum(!is.na(dr_yesno)),
dme_final=median(dme_yesno),
numdmegrades=sum(!is.na(dme_yesno)),
amd_final=median(amd_yesno),
numamdgrades=sum(!is.na(amd_yesno)),
cdr_final=median(cdr),
glaucoma_final=if_else(cdr_final>=0.7,1,0),
numcdrgrades=sum(!is.na(cdr)),
# JK: JUST DEFINING THE SEVERITY AS THE LEAST SEVERE; THIS SEEMS MOST CONSERVATIVE?
# JK: NOTE THAT IF DR==0 THEN SEVERITY IS MISSING NOT ZERO
# JK: I PLAYED AROUND WITH THE BEST WAY TO DEAL WITH VARIABLES WITH 3 OR MORE LEVELS
# JK: THIS IS MEDIAN BUT TAKES LOWER VALUE IF A TIE BETWEN EVEN NUMBER
# NOTE THAT THIS DOES not RESTRICT ONLY TO DR YES; WE MAY WANT TO DO THAT
# drsev_final1=if_else(median(dr_yesno)==0,NA_real_,min(dr_severity)),
# drsev_final2=if_else(median(dr_yesno)==0,NA_real_,median(dr_severity)),
# (LL notes to self: https://www.rdocumentation.org/packages/stats/versions/3.6.1/topics/quantile)
drsev_final=if_else(median(dr_yesno)==0,NA_real_,quantile(dr_severity, probs = 0.5, type=3, na.rm=TRUE)),
amdsev_final=if_else(median(amd_yesno)==0,NA_real_,quantile(amd_severity, probs = 0.5, type=3, na.rm=TRUE)),
# amdsev_final=if_else(median(amd_yesno)==0,NA_real_,min(amd_severity)),
nervecov_final=recode_factor(quantile(nerve, probs = 0.5, type=3, na.rm=TRUE), `0`="None", `1`="Some", `2`="All"),
maculacov_final=recode_factor(quantile(macula, probs = 0.5, type=3, na.rm=TRUE), `0`="None", `1`="Some", `2`="All"),
imageclarity_final=quantile(image_clarity, probs = 0.5, type=3, na.rm=TRUE),
vcdrconfidence_final=quantile(vcdr_confidence, probs = 0.5, type=3, na.rm=TRUE))
# JK: GENERALLY WE NEED AT LEAST 2 GRADES TO HAVE A CONSENSUS; INVESTIGATE WHEN only 1 GRADE...
xtabs(data=grading_data_consensus, ~numdrgrades + dr_final, addNA=TRUE)
xtabs(data=grading_data_consensus, ~numdmegrades + dme_final, addNA=TRUE)
xtabs(data=grading_data_consensus, ~numamdgrades + amd_final, addNA=TRUE)
xtabs(data=grading_data_consensus, ~numcdrgrades + cdr_final, addNA=TRUE)
xtabs(data=grading_data_consensus, ~drsev_final + dr_final, addNA=TRUE)
xtabs(data=grading_data_consensus, ~amdsev_final + amd_final, addNA=TRUE)
ts_needdme <- grading_data_consensus %>%
filter(dme_final==0.5)
clean_grading_data <- grading_data_consensus %>%
select(photoid, imageclarity_final, dr_final, drsev_final, dme_final, amd_final, amdsev_final, vcdrconfidence_final, cdr_final, glaucoma_final)
clean_grading_data <- grading_data_consensus %>%
select(photoid, imageclarity_final, dr_final, drsev_final, dme_final, amd_final, amdsev_final, vcdrconfidence_final, cdr_final, glaucoma_final)
alldata <- full_join(digicards_data, clean_grading_data, by="photoid") %>%
arrange(study_id, eye, camera)
# removing duplicate patient sets of photos
alldata <- alldata %>%
filter(!(photoid == "1943" | photoid == "1118" | photoid == "3240" | photoid == "2079" | photoid == "1229" | photoid == "1034")) %>%
filter(!(photoid == "3103" | photoid == "1308" | photoid == "3108" | photoid == "3624" | photoid == "1784" | photoid == "1493")) %>%
filter(!(photoid == "3439" | photoid == "1174" | photoid == "2368" | photoid == "1947" | photoid == "3218" | photoid == "1215")) %>%
filter(!(photoid == "3903" | photoid == "2229" | photoid == "3130" | photoid == "1287" | photoid == "1506" | photoid == "3686")) %>%
filter(!(photoid == "2895" | photoid == "2920" | photoid == "1966" | photoid == "1804" | photoid == "3115" | photoid == "1149")) %>%
filter(!(photoid == "1008" | photoid == "1586" | photoid == "3505" | photoid == "2884" | photoid == "1455" | photoid == "3443")) %>%
filter(!(photoid == "1943" | photoid == "1118" | photoid == "3240" | photoid == "2079" | photoid == "1229" | photoid == "1034")) %>%
filter(!(photoid == "2858" | photoid == "3808" | photoid == "2297" | photoid == "1078" | photoid == "3274" | photoid == "2896")) %>%
filter(!(photoid == "3763" | photoid == "3201" | photoid == "3970" | photoid == "3668" | photoid == "2429" | photoid == "2588")) %>%
filter(!(photoid == "1582" | photoid == "2806" | photoid == "2616" | photoid == "2056" | photoid == "2631" | photoid == "2590")) %>%
filter(!(photoid == "2058" | photoid == "2419" | photoid == "1988" | photoid == "2992" | photoid == "2213" | photoid == "3135")) %>%
filter(!(photoid == "2556" | photoid == "3577" | photoid == "1870" | photoid == "2583" | photoid == "3395" | photoid == "2527")) %>%
filter(!(photoid == "1713" | photoid == "1967" | photoid == "3587" | photoid == "3347" | photoid == "3464" | photoid == "3422")) %>%
filter(!(photoid == "3383" | photoid == "2469" | photoid == "1672" | photoid == "1684" | photoid == "1237" | photoid == "1540")) %>%
filter(!(photoid == "1810" | photoid == "1680" | photoid == "2488" | photoid == "1635" | photoid == "3194" | photoid == "2796")) %>%
filter(!(photoid == "3266" | photoid == "2909" | photoid == "1838" | photoid == "1616" | photoid == "1222" | photoid == "2242")) %>%
filter(!(photoid == "3364" | photoid == "3681" | photoid == "1550" | photoid == "3716" | photoid == "3898" | photoid == "3811")) %>%
filter(!(photoid == "1946" | photoid == "3015" | photoid == "2517" | photoid == "2809" | photoid == "1969" | photoid == "3528")) %>%
filter(!(photoid == "2547" | photoid == "2679" | photoid == "2550" | photoid == "1245" | photoid == "3209" | photoid == "3592")) %>%
filter(!(photoid == "3442" | photoid == "1138" | photoid == "1407" | photoid == "2833" | photoid == "1249" | photoid == "3434")) %>%
filter(!(photoid == "2050" | photoid == "2510" | photoid == "2413" | photoid == "2205" | photoid == "2246" | photoid == "2981")) %>%
filter(!(photoid == "2363" | photoid == "2496" | photoid == "3913" | photoid == "2255" | photoid == "1218" | photoid == "3032")) %>%
filter(!(photoid == "1809" | photoid == "1137" | photoid == "2198" | photoid == "2296" | photoid == "3562" | photoid == "2761"))
alldataofallgraders <- full_join(digicards_data, grading_data_allgrades, by="photoid") %>%
arrange(study_id, eye, camera)
alldata <- full_join(digicards_data, clean_grading_data, by="photoid") %>%
arrange(study_id, eye, camera)
# removing duplicate patient sets of photos
alldata <- alldata %>%
filter(!(photoid == "1943" | photoid == "1118" | photoid == "3240" | photoid == "2079" | photoid == "1229" | photoid == "1034")) %>%
filter(!(photoid == "3103" | photoid == "1308" | photoid == "3108" | photoid == "3624" | photoid == "1784" | photoid == "1493")) %>%
filter(!(photoid == "3439" | photoid == "1174" | photoid == "2368" | photoid == "1947" | photoid == "3218" | photoid == "1215")) %>%
filter(!(photoid == "3903" | photoid == "2229" | photoid == "3130" | photoid == "1287" | photoid == "1506" | photoid == "3686")) %>%
filter(!(photoid == "2895" | photoid == "2920" | photoid == "1966" | photoid == "1804" | photoid == "3115" | photoid == "1149")) %>%
filter(!(photoid == "1008" | photoid == "1586" | photoid == "3505" | photoid == "2884" | photoid == "1455" | photoid == "3443")) %>%
filter(!(photoid == "1943" | photoid == "1118" | photoid == "3240" | photoid == "2079" | photoid == "1229" | photoid == "1034")) %>%
filter(!(photoid == "2858" | photoid == "3808" | photoid == "2297" | photoid == "1078" | photoid == "3274" | photoid == "2896")) %>%
filter(!(photoid == "3763" | photoid == "3201" | photoid == "3970" | photoid == "3668" | photoid == "2429" | photoid == "2588")) %>%
filter(!(photoid == "1582" | photoid == "2806" | photoid == "2616" | photoid == "2056" | photoid == "2631" | photoid == "2590")) %>%
filter(!(photoid == "2058" | photoid == "2419" | photoid == "1988" | photoid == "2992" | photoid == "2213" | photoid == "3135")) %>%
filter(!(photoid == "2556" | photoid == "3577" | photoid == "1870" | photoid == "2583" | photoid == "3395" | photoid == "2527")) %>%
filter(!(photoid == "1713" | photoid == "1967" | photoid == "3587" | photoid == "3347" | photoid == "3464" | photoid == "3422")) %>%
filter(!(photoid == "3383" | photoid == "2469" | photoid == "1672" | photoid == "1684" | photoid == "1237" | photoid == "1540")) %>%
filter(!(photoid == "1810" | photoid == "1680" | photoid == "2488" | photoid == "1635" | photoid == "3194" | photoid == "2796")) %>%
filter(!(photoid == "3266" | photoid == "2909" | photoid == "1838" | photoid == "1616" | photoid == "1222" | photoid == "2242")) %>%
filter(!(photoid == "3364" | photoid == "3681" | photoid == "1550" | photoid == "3716" | photoid == "3898" | photoid == "3811")) %>%
filter(!(photoid == "1946" | photoid == "3015" | photoid == "2517" | photoid == "2809" | photoid == "1969" | photoid == "3528")) %>%
filter(!(photoid == "2547" | photoid == "2679" | photoid == "2550" | photoid == "1245" | photoid == "3209" | photoid == "3592")) %>%
filter(!(photoid == "3442" | photoid == "1138" | photoid == "1407" | photoid == "2833" | photoid == "1249" | photoid == "3434")) %>%
filter(!(photoid == "2050" | photoid == "2510" | photoid == "2413" | photoid == "2205" | photoid == "2246" | photoid == "2981")) %>%
filter(!(photoid == "2363" | photoid == "2496" | photoid == "3913" | photoid == "2255" | photoid == "1218" | photoid == "3032")) %>%
filter(!(photoid == "1809" | photoid == "1137" | photoid == "2198" | photoid == "2296" | photoid == "3562" | photoid == "2761"))
alldataofallgraders <- full_join(digicards_data, grading_data_allgrades, by="photoid") %>%
arrange(study_id, eye, camera)
# JK For final analysis we need to make sure that we have nonmissing data for gold standard and adjudicated grade for all 3 cameras.
# Only include those observations that meet this criteria.
# But confirm that we have incomplete data for these
# LL: checked patient log; confirmed these patients didn't have photos taken for 1+ cameras or an entire eye
missingdata <- as.data.frame(xtabs(data=filter(alldata, !is.na(dr_final) & !is.na(dr)), ~study_id+camera+eye)) %>%
mutate(studyideye=paste(study_id, eye, sep="_")) %>%
select(-study_id, -eye) %>%
spread(camera, Freq) %>%
mutate(sum=inview+pictor+peek,
product=inview*pictor*peek) %>%
filter(!(sum==3 & product==1)) %>%
filter(!(sum==6 & product==8))
incompletedatavector <- missingdata[["studyideye"]]
write_csv(missingdata, "missingdata.csv")
#take out rows with incomplete data for digicards/gold standard data & graded/adjudicated data for all 3 cameras
alldata_final <- alldata %>%
ungroup() %>%
mutate(studyid_eye=paste(study_id, eye, sep="_"),
dr=as.factor(dr),
dr_final=as.factor(dr_final)) %>%
filter(!(studyid_eye %in% incompletedatavector)) %>%
group_by(studyid_eye) %>%
mutate(num_of_obs=n()) %>%
filter(num_of_obs == 3)
# xtabs(data=alldata_final, ~num_of_obs+camera, addNA=TRUE)
# Should only be 3 observations per studyid_eye. So figure out what is going on.
# LL: these photoid's with 12 obs correspond to patients with missing photos. Removed!
a <- alldata_final %>% ungroup() %>% filter(num_of_obs==3) %>% distinct(study_id)
b <- alldata_final %>% ungroup() %>% filter(num_of_obs==3) %>% distinct(studyid_eye)
