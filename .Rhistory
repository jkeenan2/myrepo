filter(!(photoid == "1946" | photoid == "3015" | photoid == "2517" | photoid == "2809" | photoid == "1969" | photoid == "3528")) %>%
filter(!(photoid == "2547" | photoid == "2679" | photoid == "2550" | photoid == "1245" | photoid == "3209" | photoid == "3592")) %>%
filter(!(photoid == "3442" | photoid == "1138" | photoid == "1407" | photoid == "2833" | photoid == "1249" | photoid == "3434")) %>%
filter(!(photoid == "2050" | photoid == "2510" | photoid == "2413" | photoid == "2205" | photoid == "2246" | photoid == "2981")) %>%
filter(!(photoid == "2363" | photoid == "2496" | photoid == "3913" | photoid == "2255" | photoid == "1218" | photoid == "3032")) %>%
filter(!(photoid == "1809" | photoid == "1137" | photoid == "2198" | photoid == "2296" | photoid == "3562" | photoid == "2761"))
alldataofallgraders <- full_join(digicards_data, grading_data_allgrades, by="photoid") %>%
arrange(study_id, eye, camera) %>%
filter(!(photoid == "1943" | photoid == "1118" | photoid == "3240" | photoid == "2079" | photoid == "1229" | photoid == "1034")) %>%
filter(!(photoid == "3103" | photoid == "1308" | photoid == "3108" | photoid == "3624" | photoid == "1784" | photoid == "1493")) %>%
filter(!(photoid == "3439" | photoid == "1174" | photoid == "2368" | photoid == "1947" | photoid == "3218" | photoid == "1215")) %>%
filter(!(photoid == "3903" | photoid == "2229" | photoid == "3130" | photoid == "1287" | photoid == "1506" | photoid == "3686")) %>%
filter(!(photoid == "2895" | photoid == "2920" | photoid == "1966" | photoid == "1804" | photoid == "3115" | photoid == "1149")) %>%
filter(!(photoid == "1008" | photoid == "1586" | photoid == "3505" | photoid == "2884" | photoid == "1455" | photoid == "3443")) %>%
filter(!(photoid == "1943" | photoid == "1118" | photoid == "3240" | photoid == "2079" | photoid == "1229" | photoid == "1034")) %>%
filter(!(photoid == "2858" | photoid == "3808" | photoid == "2297" | photoid == "1078" | photoid == "3274" | photoid == "2896")) %>%
filter(!(photoid == "3763" | photoid == "3201" | photoid == "3970" | photoid == "3668" | photoid == "2429" | photoid == "2588")) %>%
filter(!(photoid == "1582" | photoid == "2806" | photoid == "2616" | photoid == "2056" | photoid == "2631" | photoid == "2590")) %>%
filter(!(photoid == "2058" | photoid == "2419" | photoid == "1988" | photoid == "2992" | photoid == "2213" | photoid == "3135")) %>%
filter(!(photoid == "2556" | photoid == "3577" | photoid == "1870" | photoid == "2583" | photoid == "3395" | photoid == "2527")) %>%
filter(!(photoid == "1713" | photoid == "1967" | photoid == "3587" | photoid == "3347" | photoid == "3464" | photoid == "3422")) %>%
filter(!(photoid == "3383" | photoid == "2469" | photoid == "1672" | photoid == "1684" | photoid == "1237" | photoid == "1540")) %>%
filter(!(photoid == "1810" | photoid == "1680" | photoid == "2488" | photoid == "1635" | photoid == "3194" | photoid == "2796")) %>%
filter(!(photoid == "3266" | photoid == "2909" | photoid == "1838" | photoid == "1616" | photoid == "1222" | photoid == "2242")) %>%
filter(!(photoid == "3364" | photoid == "3681" | photoid == "1550" | photoid == "3716" | photoid == "3898" | photoid == "3811")) %>%
filter(!(photoid == "1946" | photoid == "3015" | photoid == "2517" | photoid == "2809" | photoid == "1969" | photoid == "3528")) %>%
filter(!(photoid == "2547" | photoid == "2679" | photoid == "2550" | photoid == "1245" | photoid == "3209" | photoid == "3592")) %>%
filter(!(photoid == "3442" | photoid == "1138" | photoid == "1407" | photoid == "2833" | photoid == "1249" | photoid == "3434")) %>%
filter(!(photoid == "2050" | photoid == "2510" | photoid == "2413" | photoid == "2205" | photoid == "2246" | photoid == "2981")) %>%
filter(!(photoid == "2363" | photoid == "2496" | photoid == "3913" | photoid == "2255" | photoid == "1218" | photoid == "3032")) %>%
filter(!(photoid == "1809" | photoid == "1137" | photoid == "2198" | photoid == "2296" | photoid == "3562" | photoid == "2761"))
# JK For final analysis we need to make sure that we have nonmissing data for gold standard and adjudicated grade for all 3 cameras.
# Only include those observations that meet this criteria.
# But confirm that we have incomplete data for these
# LL: checked patient log; confirmed these patients didn't have photos taken for 1+ cameras or an entire eye
missingdata <- as.data.frame(xtabs(data=filter(alldata, !is.na(dr_final) & !is.na(dr)), ~study_id+camera+eye)) %>%
mutate(studyideye=paste(study_id, eye, sep="_")) %>%
select(-study_id, -eye) %>%
spread(camera, Freq) %>%
mutate(sum=inview+pictor+peek,
product=inview*pictor*peek) %>%
filter(!(sum==3 & product==1)) %>%
filter(!(sum==6 & product==8))
incompletedatavector <- missingdata[["studyideye"]]
write_csv(missingdata, "missingdata.csv")
#take out rows with incomplete data for digicards/gold standard data & graded/adjudicated data for all 3 cameras
alldata_final <- alldata %>%
ungroup() %>%
mutate(studyid_eye=paste(study_id, eye, sep="_"),
dr=as.factor(dr),
dr_final=as.factor(dr_final)) %>%
filter(!(studyid_eye %in% incompletedatavector)) %>%
group_by(studyid_eye) %>%
mutate(num_of_obs=n()) %>%
filter(num_of_obs == 3)
# xtabs(data=alldata_final, ~num_of_obs+camera, addNA=TRUE)
# Should only be 3 observations per studyid_eye. So figure out what is going on.
# LL: these photoid's with 12 obs correspond to patients with missing photos. Removed!
a <- alldata_final %>% ungroup() %>% filter(num_of_obs==3) %>% distinct(study_id)
b <- alldata_final %>% ungroup() %>% filter(num_of_obs==3) %>% distinct(studyid_eye)
################################
##          ANALYSES          ##
################################
# Inter-rater reliability, comparing 2 photo-graders for each camera
grading_data_allgrades_kappadata <- alldataofallgraders %>%
filter(grader %in% c(1,2)) %>%
select(study_id, eye, photoid, grader, camera, dr_yesno, amd_yesno) %>%
gather(field, value, dr_yesno:amd_yesno) %>%
mutate(fieldgrader=paste(field, grader, sep="__")) %>%
select(-field, -grader) %>%
spread(fieldgrader, value, convert=TRUE)
library(irr)
kappa2(grading_data_allgrades_kappadata[,7:8])
kappa2(grading_data_allgrades_kappadata[,amd_yesno__1:dr_yesno__2])
# JK: I guess I don't love this syntax because hard to know what 5:6 is, whereas when you use the actual variable name then clearer.
# Plus it doesn't give confidence intervals.
# LL: makes sense! for some reason, when I actually name the variables (above), I get an error that the first object is not found...
# Trying out alternatives, then just picking one...
library(fmsb)
Kappa.test(x=grading_data_allgrades_kappadata$amd_yesno__1, y=grading_data_allgrades_kappadata$amd_yesno__2, conf.level=0.95)
Kappa.test(x=grading_data_allgrades_kappadata$dr_yesno__1, y=grading_data_allgrades_kappadata$dr_yesno__2, conf.level=0.95)
library(DescTools)
CohenKappa(x=grading_data_allgrades_kappadata$amd_yesno__1, y=grading_data_allgrades_kappadata$amd_yesno__2, conf.level=0.95)
CohenKappa(x=grading_data_allgrades_kappadata$dr_yesno__1, y=grading_data_allgrades_kappadata$dr_yesno__2, conf.level=0.95)
library(psych)
cohen.kappa(x=cbind(filter(grading_data_allgrades_kappadata, camera=="peek")$amd_yesno__1, filter(grading_data_allgrades_kappadata, camera=="peek")$amd_yesno__2), alpha=0.05)
cohen.kappa(x=cbind(filter(grading_data_allgrades_kappadata, camera=="pictor")$amd_yesno__1, filter(grading_data_allgrades_kappadata, camera=="pictor")$amd_yesno__2), alpha=0.05)
cohen.kappa(x=cbind(filter(grading_data_allgrades_kappadata, camera=="inview")$amd_yesno__1, filter(grading_data_allgrades_kappadata, camera=="inview")$amd_yesno__2), alpha=0.05)
cohen.kappa(x=cbind(filter(grading_data_allgrades_kappadata, camera=="peek")$dr_yesno__1, filter(grading_data_allgrades_kappadata, camera=="peek")$dr_yesno__2), alpha=0.05)
cohen.kappa(x=cbind(filter(grading_data_allgrades_kappadata, camera=="pictor")$dr_yesno__1, filter(grading_data_allgrades_kappadata, camera=="pictor")$dr_yesno__2), alpha=0.05)
cohen.kappa(x=cbind(filter(grading_data_allgrades_kappadata, camera=="inview")$dr_yesno__1, filter(grading_data_allgrades_kappadata, camera=="inview")$dr_yesno__2), alpha=0.05)
# JK: Note that different numbers for each comparison. That is not fair. Need to make sure you are doing it on the same population.
grading_data_allgrades_kappadata2 <- grading_data_allgrades_kappadata %>%
mutate(studyid_eye=paste(study_id, eye, sep="_")) %>%
filter(!(studyid_eye %in% incompletedatavector)) %>%
group_by(studyid_eye) %>%
mutate(num_perstudyideye=n()) %>% # xtabs(data=grading_data_allgrades_kappadata2, ~numperstudyideye+camera)
# xtabs(data=grading_data_allgrades_kappadata2, ~study_id+camera)
filter(num_perstudyideye==3 & !is.na(amd_yesno__1) & !is.na(amd_yesno__2) & !is.na(dr_yesno__1) & !is.na(dr_yesno__2))
# Kappas on the same population (156 eyes)
# LL: I'm getting 355 eyes!
cohen.kappa(x=cbind(filter(grading_data_allgrades_kappadata2, camera=="peek")$amd_yesno__1, filter(grading_data_allgrades_kappadata2, camera=="peek")$amd_yesno__2), alpha=0.05)
cohen.kappa(x=cbind(filter(grading_data_allgrades_kappadata2, camera=="pictor")$amd_yesno__1, filter(grading_data_allgrades_kappadata2, camera=="pictor")$amd_yesno__2), alpha=0.05)
cohen.kappa(x=cbind(filter(grading_data_allgrades_kappadata2, camera=="inview")$amd_yesno__1, filter(grading_data_allgrades_kappadata2, camera=="inview")$amd_yesno__2), alpha=0.05)
cohen.kappa(x=cbind(filter(grading_data_allgrades_kappadata2, camera=="peek")$dr_yesno__1, filter(grading_data_allgrades_kappadata2, camera=="peek")$dr_yesno__2), alpha=0.05)
cohen.kappa(x=cbind(filter(grading_data_allgrades_kappadata2, camera=="pictor")$dr_yesno__1, filter(grading_data_allgrades_kappadata2, camera=="pictor")$dr_yesno__2), alpha=0.05)
cohen.kappa(x=cbind(filter(grading_data_allgrades_kappadata2, camera=="inview")$dr_yesno__1, filter(grading_data_allgrades_kappadata2, camera=="inview")$dr_yesno__2), alpha=0.05)
# JK: Trying out the yardstick package from Louisa's email
# JK: Note that the variable names are not all that self-evident...
# JK: the gold standard grades are dr, amd, dme, etc.
# JK: The index tests are dr_final, amd_final, etc.
#https://stackoverflow.com/questions/57146785/how-to-perform-bootstrapping-to-a-diagnostic-test-in-r
library(yardstick)
options(yardstick.event_first = FALSE)
addmargins(xtabs(data=alldata_final, ~dr+dr_final))
alldata_final %>% filter(!is.na(camera)) %>% group_by(camera) %>% sens(., truth = as.factor(dr), estimate = as.factor(dr_final))
alldata_final %>% filter(!is.na(camera)) %>% group_by(camera) %>% spec(., truth = as.factor(dr), estimate = as.factor(dr_final))
# I guess you can get multiple metrics at once with this "metric_set" command
class_metrics <- metric_set(sens, spec, ppv, npv)
library(skimr)
skim(alldata_final %>% ungroup())
# For the actual numbers...
confmatrixtable_dr <- alldata_final %>%
filter(!is.na(camera)) %>%
group_by(camera) %>%
conf_mat(dr, dr_final) %>%
mutate(tidied = map(conf_mat, tidy)) %>%
unnest(tidied) %>%
spread(name, value) %>%
rename(bothpos=cell_1_1,
bothneg=cell_2_2,
testpos_gsneg=cell_1_2,
testneg_gspos=cell_2_1)
confmat_peek_dr <- alldata_final %>%
filter(camera=="peek") %>%
conf_mat(dr, dr_final)
summary(confmat_peek_dr)
confmat_inview_dr <- alldata_final %>%
filter(camera=="inview") %>%
conf_mat(dr, dr_final)
summary(confmat_inview_dr)
confmat_pictor_dr <- alldata_final %>%
filter(camera=="pictor") %>%
conf_mat(dr, dr_final)
summary(confmat_pictor_dr)
# Now to get estimates and CIs, need to do separately. First an object with the estimates
sensspec_estimates_dr <- alldata_final %>%
filter(!is.na(camera)) %>%
group_by(camera) %>%
class_metrics(., truth = dr, estimate = dr_final) %>%
select(-.estimator) %>%
spread(.metric, .estimate, convert=TRUE) %>%
rename(sens_est=sens,
spec_est=spec,
npv_est=npv,
ppv_est=ppv)
# Check
xtabs(data=filter(alldata_final, camera=="peek"), ~dr+dr_final)
# This creates a nested data frame, where all data with same study id get put on the same line
# So if we resample, we will automatically resample all data from the same person
D <- alldata_final %>% filter(!is.na(camera)) %>% nest(-studyid_eye)
head(D)
library(rsample)
set.seed(154234)
# The bs object is the boostrap object; we are creating separate populations with resampling
# You could alter the "times" option; usually use small number of replications as testing code because faster
# But then change to a larger number (9999?) for the final analysis
bs <- bootstraps(D, times = 9)
library(purrr)
# Need the purrr package for the map function
# The map function applies a function iteratively to each element of a list or vector
# For example, let's apply "p" to everything on the list after the comma
p <- c(0.025, 0.975)
p
pmap1 <- map(p, function(x) 2 + x )
# For a shortcut you can use the ~ to signify "function" and . to signify where to apply the "p"
pmap2 <- map(p, ~ 2 + . )
pmap1
pmap2
# (The pmap1 and pmap2 are just examples, not used in analysis below. But the "p" is used)
# So here, we can make a list of both the 2.5% and 97.5% by aplying the p vector above to this partial function
# Will use this below to apply to all the metrics to get the 2.5% and 97.5% of the confidence interval.
p_funs <- map(p, ~partial(quantile, probs = .x, na.rm = TRUE)) %>%
set_names(nm = c("lower95", "upper95"))
# So finally here is the dataframe with the CIs
bs_sensspec_dr <- map(bs$splits, ~as_tibble(.) %>% unnest %>%
filter(!is.na(camera)) %>%
group_by(camera) %>%
class_metrics(., truth = dr, estimate = dr_final)) %>%
bind_rows(.id = 'boots') %>%
select(-.estimator) %>%
spread(.metric, .estimate, convert=TRUE) %>%
group_by(camera) %>%
summarize_at(vars(sens, spec, ppv, npv), lst(!!!p_funs))
# LL: significance of "!!!"?
# Now merge together the estimates and CIs and reshape into more useful format
sensspectable_dr <- full_join(sensspec_estimates_dr, bs_sensspec_dr, by="camera")
sensspectablelong_dr <- sensspectable_dr %>%
gather(field, value, npv_est:npv_upper95) %>%
separate(field, into=c("metric", "stat"), sep="_") %>%
spread(stat, value, convert=TRUE)
write_csv(sensspectablelong_dr, "sensspectablelong_dr.csv")
# This creates a nested data frame, where all data with same study id get put on the same line
# So if we resample, we will automatically resample all data from the same person
D <- alldata_final %>% filter(!is.na(camera)) %>% nest(-studyid_eye)
head(D)
library(rsample)
set.seed(154234)
# The bs object is the boostrap object; we are creating separate populations with resampling
# You could alter the "times" option; usually use small number of replications as testing code because faster
# But then change to a larger number (9999?) for the final analysis
bs <- bootstraps(D, times = 9)
library(purrr)
# Need the purrr package for the map function
# The map function applies a function iteratively to each element of a list or vector
# For example, let's apply "p" to everything on the list after the comma
p <- c(0.025, 0.975)
p
pmap1 <- map(p, function(x) 2 + x )
# For a shortcut you can use the ~ to signify "function" and . to signify where to apply the "p"
pmap2 <- map(p, ~ 2 + . )
pmap1
pmap2
# (The pmap1 and pmap2 are just examples, not used in analysis below. But the "p" is used)
# So here, we can make a list of both the 2.5% and 97.5% by aplying the p vector above to this partial function
# Will use this below to apply to all the metrics to get the 2.5% and 97.5% of the confidence interval.
p_funs <- map(p, ~partial(quantile, probs = .x, na.rm = TRUE)) %>%
set_names(nm = c("lower95", "upper95"))
# So finally here is the dataframe with the CIs
bs_sensspec_dr <- map(bs$splits, ~as_tibble(.) %>% unnest %>%
filter(!is.na(camera)) %>%
group_by(camera) %>%
class_metrics(., truth = dr, estimate = dr_final)) %>%
bind_rows(.id = 'boots') %>%
select(-.estimator) %>%
spread(.metric, .estimate, convert=TRUE) %>%
group_by(camera) %>%
summarize_at(vars(sens, spec, ppv, npv), lst(!!!p_funs))
# LL: significance of "!!!"?
# Now merge together the estimates and CIs and reshape into more useful format
sensspectable_dr <- full_join(sensspec_estimates_dr, bs_sensspec_dr, by="camera")
sensspectablelong_dr <- sensspectable_dr %>%
gather(field, value, npv_est:npv_upper95) %>%
separate(field, into=c("metric", "stat"), sep="_") %>%
spread(stat, value, convert=TRUE)
write_csv(sensspectablelong_dr, "sensspectablelong_dr.csv")
# numbers for AMD
addmargins(xtabs(data=alldata_final, ~amd+amd_final))
alldata_final %>% filter(!is.na(camera)) %>% group_by(camera) %>% sens(., truth = as.factor(amd), estimate = as.factor(amd_final))
alldata_final %>% filter(!is.na(camera)) %>% group_by(camera) %>% spec(., truth = as.factor(amd), estimate = as.factor(amd_final))
alldata_final$amd <- as.factor(alldata_final$amd)
alldata_final$amd_final <- as.factor(alldata_final$amd_final)
class(alldata_final$amd)
class(alldata_final$amd_final)
confmatrixtable_amd <- alldata_final %>%
filter(!is.na(camera)) %>%
group_by(camera) %>%
conf_mat(amd, amd_final) %>%
mutate(tidied = map(conf_mat, tidy)) %>%
unnest(tidied) %>%
spread(name, value) %>%
rename(bothpos=cell_1_1,
bothneg=cell_2_2,
testpos_gsneg=cell_1_2,
testneg_gspos=cell_2_1)
confmat_peek_amd <- alldata_final %>%
filter(camera=="peek") %>%
conf_mat(amd, amd_final)
summary(confmat_peek_amd)
confmat_inview_amd <- alldata_final %>%
filter(camera=="inview") %>%
conf_mat(amd, amd_final)
summary(confmat_inview_amd)
confmat_pictor_amd <- alldata_final %>%
filter(camera=="pictor") %>%
conf_mat(amd, amd_final)
summary(confmat_pictor_amd)
sensspec_estimates_amd <- alldata_final %>%
filter(!is.na(camera)) %>%
group_by(camera) %>%
class_metrics(., truth = amd, estimate = amd_final) %>%
select(-.estimator) %>%
spread(.metric, .estimate, convert=TRUE) %>%
rename(sens_est=sens,
spec_est=spec,
npv_est=npv,
ppv_est=ppv)
# Check
xtabs(data=filter(alldata_final, camera=="peek"), ~amd+amd_final)
## bootstrapped 95% CI accounting for clustering of eyes
bs_sensspec_amd <- map(bs$splits, ~as_tibble(.) %>% unnest %>%
filter(!is.na(camera)) %>%
group_by(camera) %>%
class_metrics(., truth = as.factor(amd), estimate = as.factor(amd_final))) %>%
bind_rows(.id = 'boots') %>%
select(-.estimator) %>%
spread(.metric, .estimate, convert=TRUE) %>%
group_by(camera) %>%
summarize_at(vars(sens, spec, ppv, npv), lst(!!!p_funs))
# Now merge together the estimates and CIs and reshape into more useful format
sensspectable_amd <- full_join(sensspec_estimates_amd, bs_sensspec_amd, by="camera")
sensspectablelong_amd <- sensspectable_amd %>%
gather(field, value, npv_est:npv_upper95) %>%
separate(field, into=c("metric", "stat"), sep="_") %>%
spread(stat, value, convert=TRUE) %>%
write.csv("senspectablelong_amd.csv")
# numbers for AMD
addmargins(xtabs(data=alldata_final, ~amd+amd_final))
alldata_final %>% filter(!is.na(camera)) %>% group_by(camera) %>% sens(., truth = as.factor(amd), estimate = as.factor(amd_final))
alldata_final %>% filter(!is.na(camera)) %>% group_by(camera) %>% spec(., truth = as.factor(amd), estimate = as.factor(amd_final))
alldata_final$amd <- as.factor(alldata_final$amd)
alldata_final$amd_final <- as.factor(alldata_final$amd_final)
class(alldata_final$amd)
class(alldata_final$amd_final)
confmatrixtable_amd <- alldata_final %>%
filter(!is.na(camera)) %>%
group_by(camera) %>%
conf_mat(amd, amd_final) %>%
mutate(tidied = map(conf_mat, tidy)) %>%
unnest(tidied) %>%
spread(name, value) %>%
rename(bothpos=cell_1_1,
bothneg=cell_2_2,
testpos_gsneg=cell_1_2,
testneg_gspos=cell_2_1)
confmat_peek_amd <- alldata_final %>%
filter(camera=="peek") %>%
conf_mat(amd, amd_final)
summary(confmat_peek_amd)
confmat_inview_amd <- alldata_final %>%
filter(camera=="inview") %>%
conf_mat(amd, amd_final)
summary(confmat_inview_amd)
confmat_pictor_amd <- alldata_final %>%
filter(camera=="pictor") %>%
conf_mat(amd, amd_final)
summary(confmat_pictor_amd)
sensspec_estimates_amd <- alldata_final %>%
filter(!is.na(camera)) %>%
group_by(camera) %>%
class_metrics(., truth = amd, estimate = amd_final) %>%
select(-.estimator) %>%
spread(.metric, .estimate, convert=TRUE) %>%
rename(sens_est=sens,
spec_est=spec,
npv_est=npv,
ppv_est=ppv)
# Check
xtabs(data=filter(alldata_final, camera=="peek"), ~amd+amd_final)
## bootstrapped 95% CI accounting for clustering of eyes
bs_sensspec_amd <- map(bs$splits, ~as_tibble(.) %>% unnest %>%
filter(!is.na(camera)) %>%
group_by(camera) %>%
class_metrics(., truth = as.factor(amd), estimate = as.factor(amd_final))) %>%
bind_rows(.id = 'boots') %>%
select(-.estimator) %>%
spread(.metric, .estimate, convert=TRUE) %>%
group_by(camera) %>%
summarize_at(vars(sens, spec, ppv, npv), lst(!!!p_funs))
# Now merge together the estimates and CIs and reshape into more useful format
sensspectable_amd <- full_join(sensspec_estimates_amd, bs_sensspec_amd, by="camera")
sensspectablelong_amd <- sensspectable_amd %>%
gather(field, value, npv_est:npv_upper95) %>%
separate(field, into=c("metric", "stat"), sep="_") %>%
spread(stat, value, convert=TRUE) %>%
write.csv("senspectablelong_amd.csv")
# numbers for glaucoma
addmargins(xtabs(data=alldata_final, ~glaucoma+glaucoma_final))
alldata_final %>% filter(!is.na(camera)) %>% group_by(camera) %>% sens(., truth = as.factor(glaucoma), estimate = as.factor(glaucoma_final))
alldata_final %>% filter(!is.na(camera)) %>% group_by(camera) %>% spec(., truth = as.factor(glaucoma), estimate = as.factor(glaucoma_final))
alldata_final$glaucoma <- as.factor(alldata_final$glaucoma)
alldata_final$glaucoma_final <- as.factor(alldata_final$glaucoma_final)
class(alldata_final$glaucoma)
class(alldata_final$glaucoma_final)
confmatrixtable_glaucoma <- alldata_final %>%
filter(!is.na(camera)) %>%
group_by(camera) %>%
conf_mat(glaucoma, glaucoma_final) %>%
mutate(tidied = map(conf_mat, tidy)) %>%
unnest(tidied) %>%
spread(name, value) %>%
rename(bothpos=cell_1_1,
bothneg=cell_2_2,
testpos_gsneg=cell_1_2,
testneg_gspos=cell_2_1)
confmat_peek_glaucoma <- alldata_final %>%
filter(camera=="peek") %>%
conf_mat(glaucoma, glaucoma_final)
summary(confmat_peek_glaucoma)
confmat_inview_glaucoma <- alldata_final %>%
filter(camera=="inview") %>%
conf_mat(glaucoma, glaucoma_final)
summary(confmat_inview_glaucoma)
confmat_pictor_glaucoma <- alldata_final %>%
filter(camera=="pictor") %>%
conf_mat(glaucoma, glaucoma_final)
summary(confmat_pictor_glaucoma)
sensspec_estimates_glaucoma <- alldata_final %>%
filter(!is.na(camera)) %>%
group_by(camera) %>%
class_metrics(., truth = glaucoma, estimate = glaucoma_final) %>%
select(-.estimator) %>%
spread(.metric, .estimate, convert=TRUE) %>%
rename(sens_est=sens,
spec_est=spec,
npv_est=npv,
ppv_est=ppv)
# Check
xtabs(data=filter(alldata_final, camera=="peek"), ~glaucoma+glaucoma_final)
bs_sensspec_glaucoma <- map(bs$splits, ~as_tibble(.) %>% unnest %>%
filter(!is.na(camera)) %>%
group_by(camera) %>%
class_metrics(., truth = as.factor(glaucoma), estimate = as.factor(glaucoma_final))) %>%
bind_rows(.id = 'boots') %>%
select(-.estimator) %>%
spread(.metric, .estimate, convert=TRUE) %>%
group_by(camera) %>%
summarize_at(vars(sens, spec, ppv, npv), lst(!!!p_funs))
bs_sensspec_dr <- map(bs$splits, ~as_tibble(.) %>% unnest %>%
filter(!is.na(camera)) %>%
group_by(camera) %>%
class_metrics(., truth = dr, estimate = dr_final)) %>%
bind_rows(.id = 'boots') %>%
select(-.estimator) %>%
spread(.metric, .estimate, convert=TRUE) %>%
group_by(camera) %>%
summarize_at(vars(sens, spec, ppv, npv), lst(!!!p_funs))
bs_sensspec_glaucoma <- map(bs$splits, ~as_tibble(.) %>% unnest %>%
filter(!is.na(camera)) %>%
group_by(camera) %>%
class_metrics(., truth = glaucoma, estimate = glaucoma_final)) %>%
bind_rows(.id = 'boots') %>%
select(-.estimator) %>%
spread(.metric, .estimate, convert=TRUE) %>%
group_by(camera) %>%
summarize_at(vars(sens, spec, ppv, npv), lst(!!!p_funs))
class(alldata_final$glaucoma)
class(alldata_final$glaucoma_final)
alldata_final$glaucoma <- as.factor(alldata_final$glaucoma)
alldata_final$glaucoma_final <- as.factor(alldata_final$glaucoma_final)
alldata_final$glaucoma <- as.factor(alldata_final$glaucoma)
alldata_final$glaucoma_final <- as.factor(alldata_final$glaucoma_final)
class(alldata_final$glaucoma)
class(alldata_final$glaucoma_final)
class(alldata_final$glaucoma)
class(alldata_final$glaucoma_final)
## bootstrapped 95% CI accounting for clustering of eyes
bs_sensspec_glaucoma <- map(bs$splits, ~as_tibble(.) %>% unnest %>%
filter(!is.na(camera)) %>%
group_by(camera) %>%
class_metrics(., truth = glaucoma, estimate = glaucoma_final)) %>%
bind_rows(.id = 'boots') %>%
select(-.estimator) %>%
spread(.metric, .estimate, convert=TRUE) %>%
group_by(camera) %>%
summarize_at(vars(sens, spec, ppv, npv), lst(!!!p_funs))
## bootstrapped 95% CI accounting for clustering of eyes
bs_sensspec_glaucoma <- map(bs$splits, ~as_tibble(.) %>% unnest %>%
filter(!is.na(camera)) %>%
group_by(camera) %>%
class_metrics(., truth = glaucoma, estimate = glaucoma_final)) %>%
bind_rows(.id = 'boots') %>%
select(-.estimator) %>%
spread(.metric, .estimate, convert=TRUE) %>%
group_by(camera) %>%
summarize_at(vars(sens, spec, ppv, npv), lst(!!!p_funs))
alldata_final$amd <- as.factor(alldata_final$amd)
alldata_final$amd_final <- as.factor(alldata_final$amd_final)
class(alldata_final$amd)
class(alldata_final$amd_final)
## bootstrapped 95% CI accounting for clustering of eyes
bs_sensspec_amd <- map(bs$splits, ~as_tibble(.) %>% unnest %>%
filter(!is.na(camera)) %>%
group_by(camera) %>%
class_metrics(., truth = as.factor(amd), estimate = as.factor(amd_final))) %>%
bind_rows(.id = 'boots') %>%
select(-.estimator) %>%
spread(.metric, .estimate, convert=TRUE) %>%
group_by(camera) %>%
summarize_at(vars(sens, spec, ppv, npv), lst(!!!p_funs))
alldata_final$glaucoma <- as.factor(alldata_final$glaucoma)
alldata_final$glaucoma_final <- as.factor(alldata_final$glaucoma_final)
class(alldata_final$glaucoma)
class(alldata_final$glaucoma_final)
## bootstrapped 95% CI accounting for clustering of eyes
# LL: I made "glaucoma" & "glaucoma_final" factors above, but still getting error that "'truth' should be a factor but a integer was supplied"
bs_sensspec_glaucoma <- map(bs$splits, ~as_tibble(.) %>% unnest %>%
filter(!is.na(camera)) %>%
group_by(camera) %>%
class_metrics(., truth = glaucoma, estimate = glaucoma_final)) %>%
bind_rows(.id = 'boots') %>%
select(-.estimator) %>%
spread(.metric, .estimate, convert=TRUE) %>%
group_by(camera) %>%
summarize_at(vars(sens, spec, ppv, npv), lst(!!!p_funs))
bs_sensspec_glaucoma <- map(bs$splits, ~as_tibble(.) %>% unnest %>%
filter(!is.na(camera)) %>%
group_by(camera) %>%
class_metrics(., truth = glaucoma, estimate = glaucoma_final))
bs_sensspec_glaucoma <- map(bs$splits, ~as_tibble(.) %>% unnest %>%
filter(!is.na(camera)) %>%
group_by(camera)
bs_sensspec_glaucoma <- map(bs$splits, ~as_tibble(.) %>% unnest %>%
filter(!is.na(camera)) %>%
group_by(camera) %>%
class_metrics(., truth = as.factor(glaucoma), estimate = as.factor(glaucoma_final))) %>%
bind_rows(.id = 'boots') %>%
select(-.estimator) %>%
spread(.metric, .estimate, convert=TRUE) %>%
group_by(camera) %>%
summarize_at(vars(sens, spec, ppv, npv), lst(!!!p_funs))
addmargins(xtabs(data=alldata_final, ~otherdx+other_dx_yesno))
